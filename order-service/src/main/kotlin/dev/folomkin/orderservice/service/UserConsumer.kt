package dev.folomkin.orderservice.service

import dev.folomkin.shared.dto.UserDto
import org.apache.kafka.clients.consumer.ConsumerRecord
import org.slf4j.LoggerFactory
import org.springframework.kafka.annotation.KafkaListener
import org.springframework.kafka.core.KafkaTemplate
import org.springframework.stereotype.Service

@Service
class UserConsumer(val kafkaTemplate: KafkaTemplate<String, UserDto>) {
    private val logger = LoggerFactory.getLogger(UserConsumer::class.java)

    @KafkaListener(
        topics = ["user-events"],
        groupId = "order-service-group",
        containerFactory = "kafkaListenerContainerFactory"
    )
    fun consume(record: ConsumerRecord<String, UserDto>) {

        try {
//            if (record.value().name == "error") {
//                throw RuntimeException("Test error")
//            }
            val id = record.key()  // –∑–¥–µ—Å—å –≤–∞—à UUID
            val user = record.value()
            println("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: $user with id: $id")
            // —Ç—É—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏

            if(user.name == "FAIL"){
                logger.error("‚ùå –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏")
                println("‚ùå –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏")
                throw RuntimeException("–ò–º–∏—Ç–∏—Ä—É–µ–º —Å–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            }

        } catch (ex: Exception) {
            println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ retry-topic: ${ex.message}")
            kafkaTemplate.send("user-events-retry", record.key(), record.value())
        }
    }

    @KafkaListener(topics = ["user-events-retry"], groupId = "retry-service-group")
    fun retry(record: ConsumerRecord<String, UserDto>) {
        try {
            println("‚ôªÔ∏è Retry –æ–±—Ä–∞–±–æ—Ç–∫–∞: ${record.value()}")
            kafkaTemplate.send("user-events", record.key(), record.value()) // —Å–Ω–æ–≤–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–ø–∏–∫
        } catch (ex: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –≤ retry, –ø–æ–º–µ—â–∞–µ–º –≤ DLT: ${ex.message}")
            kafkaTemplate.send("user-events-dlt", record.key(), record.value())
        }
    }


    @KafkaListener(topics = ["user-events-dlt"], groupId = "dlt-service-group")
    fun consumeFailed(record: ConsumerRecord<String, UserDto>) {
        println("üíÄ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ DLT: ${record.value()}")
        // —Ç—É—Ç –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å, –∞–ª–µ—Ä—Ç–∏—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä—è–º–æ –≤ @KafkaListener
     *
     * –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –ª—é–±–æ–º—É –ø–æ–ª—é, –ª–∏–±–æ –ø–æ –∫–ª—é—á—É (record.key()).
     * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RecordFilterStrategy –≤
     * ConcurrentKafkaListenerContainerFactory –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è
     * —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –≤—ã–∑–æ–≤–∞ listener.
     *
     * –ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ñ–∞–±—Ä–∏–∫–∏:
     * factory.setRecordFilterStrategy { record: ConsumerRecord<String, UserDto> ->
     *     !record.value().name.startsWith("A") // true ‚Üí —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–±—Ä–æ—Å–∏—Ç—Å—è
     * }
     *
     */

//    @KafkaListener(topics = ["user-topic"], groupId = "order-service-group")
    fun consumeFiltered(record: ConsumerRecord<String, UserDto>) {
        val user = record.value()
        if (user.name.startsWith("A")) {
            println("Processing user starting with A: $user")
        } else {
            println("Skipping user: $user")
        }
    }
}