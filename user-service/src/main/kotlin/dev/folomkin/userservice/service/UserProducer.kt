package dev.folomkin.userservice.service

import dev.folomkin.shared.dto.UserDto
import org.springframework.kafka.core.KafkaTemplate
import org.springframework.stereotype.Service
import java.util.UUID
import java.util.concurrent.TimeUnit


@Service
class UserProducer(
    private val kafkaTemplate: KafkaTemplate<String, UserDto>,
    private val retryKafkaTemplate: KafkaTemplate<String, Any> // –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫ –¥–ª—è retry

) {
    fun sendUser(user: UserDto) {
        val id = UUID.randomUUID().toString()
        kafkaTemplate.send("user-events", id, user)
            .whenComplete { result, ex ->
                if (ex == null) {
                    println("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result?.producerRecord?.value()}")
                } else {
                    println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ user-events: ${ex.message}")
                    // fallback –≤ retry-topic
                    kafkaTemplate.send("user-events-retry", id, result?.producerRecord?.value())
                        .whenComplete { retryResult, retryEx ->
                            if (retryEx == null) {
                                println("üîÅ –£—à–ª–æ –≤ user-events-retry: $user")
                            } else {
                                println("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ –≤ retry: ${retryEx.message}")
                            }
                        }
                }
            }
    }


//        return try {
//            kafkaTemplate.send("user-events", id, user)
//                .get(5, TimeUnit.SECONDS) // –º–∞–∫—Å–∏–º—Éq–º –∂–¥—ë–º 5 —Å–µ–∫—É–Ω–¥
//            println("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${user} —Å id: ${id}")
//            true
//        } catch (ex: Exception) {
//            println("‚ùå –û—à–∏–±–∫–∞ Kafka: ${ex.message}")
//            false
//        }

}